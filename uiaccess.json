{
  "swagger": "2.0",
  "info": {
    "title": "UniFi Access API",
    "version": "1.0"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "host": "unifi.localdomain:12445",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "Token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "Token": []
    }
  ],
  "paths": {
    "/api/v1/developer/access_policies": {
      "get": {
        "summary": "5.6 Fetch All Access Policies",
        "operationId": "AccessPolicyService_FetchAllAccessPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyAccessPoliciesResponse"
            }
          }
        },
        "tags": [
          "Access Policy"
        ]
      },
      "post": {
        "summary": "5.2 Create Access Policy",
        "operationId": "AccessPolicyService_CreateAccessPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyAccessPolicyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessPolicyCreateAccessPolicyRequest"
            }
          }
        ],
        "tags": [
          "Access Policy"
        ]
      }
    },
    "/api/v1/developer/access_policies/holiday_groups": {
      "get": {
        "summary": "5.12 Fetch All Holiday Groups",
        "operationId": "AccessPolicyService_FetchAllHolidayGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyHolidayGroupSummaryResponse"
            }
          }
        },
        "tags": [
          "Access Policy"
        ]
      },
      "post": {
        "summary": "5.8 Create Holiday Group",
        "operationId": "AccessPolicyService_CreateHolidayGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyHolidayGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessPolicyCreateHolidayGroupRequest"
            }
          }
        ],
        "tags": [
          "Access Policy"
        ]
      }
    },
    "/api/v1/developer/access_policies/holiday_groups/{id}": {
      "get": {
        "summary": "5.11 Fetch Holiday Group",
        "operationId": "AccessPolicyService_FetchHolidayGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyHolidayGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identity ID of the holiday group.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Access Policy"
        ]
      },
      "delete": {
        "summary": "5.10 Delete Holiday Group",
        "operationId": "AccessPolicyService_DeleteHolidayGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyHolidayGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identity ID of the holiday group.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Access Policy"
        ]
      },
      "put": {
        "summary": "5.9 Update Holiday Group",
        "operationId": "AccessPolicyService_UpdateHolidayGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyHolidayGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessPolicyUpdateHolidayGroupRequest"
            }
          }
        ],
        "tags": [
          "Access Policy"
        ]
      }
    },
    "/api/v1/developer/access_policies/schedules": {
      "get": {
        "summary": "5.17 Fetch All Schedules",
        "operationId": "AccessPolicyService_FetchAllSchedules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicySchedulesResponse"
            }
          }
        },
        "tags": [
          "Access Policy"
        ]
      },
      "post": {
        "summary": "5.14 Create Schedule",
        "operationId": "AccessPolicyService_CreateSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyScheduleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessPolicyCreateScheduleRequest"
            }
          }
        ],
        "tags": [
          "Access Policy"
        ]
      }
    },
    "/api/v1/developer/access_policies/schedules/{id}": {
      "get": {
        "summary": "5.16 Fetch Schedule",
        "operationId": "AccessPolicyService_FetchSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyScheduleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identity ID of the schedule.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Access Policy"
        ]
      },
      "delete": {
        "summary": "5.18 Delete Schedule",
        "operationId": "AccessPolicyService_DeleteSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyScheduleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identity ID of the schedule.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Access Policy"
        ]
      },
      "put": {
        "summary": "5.15 Update Schedule",
        "operationId": "AccessPolicyService_UpdateSchedule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyScheduleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessPolicyUpdateScheduleRequest"
            }
          }
        ],
        "tags": [
          "Access Policy"
        ]
      }
    },
    "/api/v1/developer/access_policies/{id}": {
      "get": {
        "summary": "5.5 Fetch Access Policy",
        "operationId": "AccessPolicyService_FetchAccessPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyAccessPolicyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identity ID of the access policy.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Access Policy"
        ]
      },
      "delete": {
        "summary": "5.4 Delete Access Policy",
        "operationId": "AccessPolicyService_DeleteAccessPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyAccessPolicyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identity ID of the access policy.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Access Policy"
        ]
      },
      "put": {
        "summary": "5.3 Update Access Policy",
        "operationId": "AccessPolicyService_UpdateAccessPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyAccessPolicyResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AccessPolicyUpdateAccessPolicyRequest"
            }
          }
        ],
        "tags": [
          "Access Policy"
        ]
      }
    },
    "/api/v1/developer/credentials/nfc_cards/sessions": {
      "post": {
        "summary": "6.2 Enroll NFC Card",
        "operationId": "CredentialService_EnrollNfcCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialNfcCardSessionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CredentialEnrollNfcCardRequest"
            }
          }
        ],
        "tags": [
          "Credential"
        ]
      }
    },
    "/api/v1/developer/credentials/nfc_cards/sessions/{id}": {
      "get": {
        "summary": "6.3 Fetch NFC Card Enrollment Status",
        "operationId": "CredentialService_FetchNfcCardSessionStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialNfcCardTokenResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "The id of the session",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credential"
        ]
      },
      "delete": {
        "summary": "6.4 Remove a Session Created for NFC Card Enrollment",
        "operationId": "CredentialService_RemoveNfcCardSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialNfcCardSessionResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "The id of the session.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credential"
        ]
      }
    },
    "/api/v1/developer/credentials/nfc_cards/tokens": {
      "get": {
        "summary": "6.8 Fetch All NFC Cards",
        "operationId": "CredentialService_FetchAllNfcCards",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialNfcCardsResponse"
            }
          }
        },
        "tags": [
          "Credential"
        ]
      }
    },
    "/api/v1/developer/credentials/nfc_cards/tokens/{token}": {
      "get": {
        "summary": "6.7 Fetch NFC Card",
        "operationId": "CredentialService_FetchNfcCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialNfcCardResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.token",
            "description": "Token of the NFC card.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credential"
        ]
      },
      "delete": {
        "summary": "6.9 Delete NFC Card",
        "operationId": "CredentialService_DeleteNfcCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialNfcCardResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credential"
        ]
      }
    },
    "/api/v1/developer/credentials/pin_codes": {
      "post": {
        "summary": "6.1 Generate a PIN Code",
        "operationId": "CredentialService_GeneratePinCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CredentialPINCodeResponse"
            }
          }
        },
        "tags": [
          "Credential"
        ]
      }
    },
    "/api/v1/developer/devices": {
      "get": {
        "summary": "8.1 Fetch Devices",
        "operationId": "DeviceService_FetchDevices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeviceDevicesResponse"
            }
          }
        },
        "tags": [
          "Device"
        ]
      }
    },
    "/api/v1/developer/door_groups": {
      "get": {
        "summary": "7.5 Fetch All Door Groups",
        "operationId": "SpaceService_FetchAllDoorGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceResourcesResponse"
            }
          }
        },
        "tags": [
          "Space"
        ]
      },
      "post": {
        "summary": "7.2 Create Door Group",
        "operationId": "SpaceService_CreateDoorGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceResourceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpaceCreateDoorGroupRequest"
            }
          }
        ],
        "tags": [
          "Space"
        ]
      }
    },
    "/api/v1/developer/door_groups/topology": {
      "get": {
        "summary": "7.1 Fetch Door Group Topology",
        "operationId": "SpaceService_FetchDoorGroupTopology",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceResourcesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "body.type",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Space"
        ]
      }
    },
    "/api/v1/developer/door_groups/{id}": {
      "get": {
        "summary": "7.3 Fetch Door Group",
        "operationId": "SpaceService_FetchDoorGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceResourceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Space"
        ]
      },
      "delete": {
        "summary": "7.6 Delete Door Group",
        "operationId": "SpaceService_DeleteDoorGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceResourceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Space"
        ]
      },
      "put": {
        "summary": "7.4 Update Door Group",
        "operationId": "SpaceService_UpdateDoorGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceResourceResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpaceUpdateDoorGroupRequest"
            }
          }
        ],
        "tags": [
          "Space"
        ]
      }
    },
    "/api/v1/developer/doors": {
      "get": {
        "summary": "7.8 Fetch All Doors",
        "operationId": "SpaceService_FetchAllDoors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceDoorsResponse"
            }
          }
        },
        "tags": [
          "Space"
        ]
      }
    },
    "/api/v1/developer/doors/settings/emergency": {
      "get": {
        "summary": "7.13 Fetch Door Emergency Status",
        "operationId": "SpaceService_FetchDoorEmergencyStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceDoorEmergencyStatusResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body.lockdown",
            "description": "True will keep the door locked",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "body.evacuation",
            "description": "True will keep the door unlocked.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Space"
        ]
      },
      "put": {
        "summary": "7.12 Set Door Emergency Status",
        "operationId": "SpaceService_SetDoorEmergencyStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceDoorStatusResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpaceSetDoorEmergencyStatusRequest"
            }
          }
        ],
        "tags": [
          "Space"
        ]
      }
    },
    "/api/v1/developer/doors/{id}": {
      "get": {
        "summary": "7.7 Fetch Door",
        "operationId": "SpaceService_FetchDoor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceDoorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Space"
        ]
      }
    },
    "/api/v1/developer/doors/{id}/lock_rule": {
      "get": {
        "summary": "7.11 Fetch Door Locking Rule",
        "operationId": "SpaceService_FetchDoorLockingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceDoorLockingRuleResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "body.type",
            "description": "enum type {schedule,keep_lock,keep_unlock,custom,lock_early} keep_lock is\nused to set the \"keep locked\" state, while keep_unlock is used to set the\n\"keep unlocked\" state. custom is used to customize the unlock time\nduration. schedule indicates that the door is currently in the unlock\nschedule state. The lock_early is used to terminate doors in an unlock\nschedule early.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "body.endedTime",
            "description": "End time of the set rule, ex: 1708672257",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Space"
        ]
      },
      "put": {
        "summary": "7.10 Set Temporary Door Locking Rule",
        "operationId": "SpaceService_SetTemporaryDoorLockingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceDoorStatusResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SpaceSetTemporaryDoorLockingRuleRequest"
            }
          }
        ],
        "tags": [
          "Space"
        ]
      }
    },
    "/api/v1/developer/doors/{id}/unlock": {
      "put": {
        "summary": "7.9 Remote Door Unlocking",
        "operationId": "SpaceService_RemoteDoorUnlocking",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SpaceDoorStatusResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Space"
        ]
      }
    },
    "/api/v1/developer/system/logs": {
      "get": {
        "summary": "9.2 Fetch System Logs",
        "operationId": "SystemLogService_FetchSystemLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SystemLogFetchSystemLogsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "params.pageNum",
            "description": "Current page number in the pagination.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "params.pageSize",
            "description": "Number of logs per page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "body.topic",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "body.since",
            "description": "Fetch different system logs by topic. enum topic\n{critical,door_openings,updates,device_events,admin_activity,visitor}",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body.until",
            "description": "Start time for log fetching, ex: 1689304925",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body.actorId",
            "description": "End time for log fetching, ex: 1689804925\n\nIdentity ID of the actor (user, visitor, and device), ex:\n 3e1f196e-c97b-4748-aecb-eab5e9c251b2",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "System Log"
        ]
      }
    },
    "/api/v1/developer/system/logs/export": {
      "post": {
        "summary": "9.3 Export System Logs",
        "operationId": "SystemLogService_ExportSystemLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SystemLogExportSystemLogsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SystemLogExportSystemLogsRequest"
            }
          }
        ],
        "tags": [
          "System Log"
        ]
      }
    },
    "/api/v1/developer/system/logs/resource/{id}": {
      "get": {
        "summary": "9.4 Fetch Resources in System Logs",
        "operationId": "SystemLogService_FetchResourcesInSystemLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SystemLogFetchResourcesInSystemLogsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Resource ID is obtained from targets categorized as the\n 'activities_resource' type in system logs. \"target\": [{\"type\":\n \"activities_resource\",\"id\": \"0418d6a38f00-b6906057-\n 2a90-4426-835c-b5b172381fec\",\"display_name\": \"Resource\",\"alternate_id\":\n \"\",\"alternate_name\": \"\"}]",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "System Log"
        ]
      }
    },
    "/api/v1/developer/system/static/{path}": {
      "get": {
        "summary": "9.5 Fetch Static Resources in System Logs",
        "operationId": "SystemLogService_FetchStaticResourcesInSystemLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SystemLogFetchStaticResourcesInSystemLogsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "path",
            "description": "Resource paths, currently supporting /avatar, /capture, and\n activities_resource.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "System Log"
        ]
      }
    },
    "/api/v1/developer/user_groups/{id}/identity/assignments": {
      "get": {
        "summary": "10.6 Fetch the Resources Assigned to User Groups",
        "operationId": "UniFiIdentityService_FetchUserGroupResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UniFiIdentityResourcesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UniFi Identity"
        ]
      },
      "post": {
        "summary": "10.5 Assign Resources to User Groups",
        "operationId": "UniFiIdentityService_AssignUserGroupResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UniFiIdentityResourcesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UniFiIdentityAssignUserGroupResourcesRequest"
            }
          }
        ],
        "tags": [
          "UniFi Identity"
        ]
      }
    },
    "/api/v1/developer/users/identity/assignments": {
      "get": {
        "summary": "10.2 Fetch Available Resources",
        "operationId": "UniFiIdentityService_FetchAvailableResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UniFiIdentityResourcesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "params.resourceType",
            "description": "Display the type of resources; show all when left blank. enum\nresource_type {ev_station,vpn,wifi} ex: resource_type=ev_station,wifi,vpn",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UniFi Identity"
        ]
      }
    },
    "/api/v1/developer/users/identity/invitations": {
      "post": {
        "summary": "10.1 Send Unifi Identity Invitations",
        "operationId": "UniFiIdentityService_SendUnifiIdentityInvitations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UniFiIdentityInvitationStatusResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UniFiIdentitySendUnifiIdentityInvitationsRequest"
            }
          }
        ],
        "tags": [
          "UniFi Identity"
        ]
      }
    },
    "/api/v1/developer/users/{id}/identity/assignments": {
      "get": {
        "summary": "10.4 Fetch Resources Assigned to Users",
        "operationId": "UniFiIdentityService_FetchUserResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UniFiIdentityResourcesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UniFi Identity"
        ]
      },
      "post": {
        "summary": "10.3 Assign Resources to Users",
        "operationId": "UniFiIdentityService_AssignUserResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UniFiIdentityResourcesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UniFiIdentityAssignUserResourcesRequest"
            }
          }
        ],
        "tags": [
          "UniFi Identity"
        ]
      }
    },
    "/api/v1/developer/user_groups": {
      "get": {
        "summary": "3.12 Fetch All User Groups",
        "operationId": "UserService_FetchAllUserGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserUserGroupsResponse"
            }
          }
        },
        "tags": [
          "User"
        ]
      },
      "post": {
        "summary": "3.11 Create User Group",
        "operationId": "UserService_CreateUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreateUserGroupRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/user_groups/{id}": {
      "get": {
        "summary": "3.13 Fetch User Group",
        "operationId": "UserService_FetchUserGroups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserUserGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "delete": {
        "summary": "3.15 Delete User Group",
        "operationId": "UserService_DeleteUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "put": {
        "summary": "3.14 Update User Group",
        "operationId": "UserService_UpdateUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateUserGroupRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/user_groups/{id}/access_policies": {
      "get": {
        "summary": "3.22 Fetch the Access Policies Assigned to a User Group",
        "operationId": "UserService_FetchUserGroupAccessPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyAccessPoliciesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identity ID of the user group. Get it from the API,\n /api/v1/developer/user_groups",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "put": {
        "summary": "3.21 Assign Access Policy to User Group",
        "operationId": "UserService_AssignUserGroupAccessPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserUserGroupResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAssignUserGroupAccessPolicyRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/user_groups/{id}/user/delete": {
      "post": {
        "summary": "3.17 Uniassigh User from User Group",
        "operationId": "UserService_UnassignUserFromUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUnassignUserFromUserGroupRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/user_groups/{id}/users": {
      "get": {
        "summary": "3.18 Fetch Users in a User Group",
        "operationId": "UserService_FetchUsersInUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identify ID of the user group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "post": {
        "summary": "3.16 Assign User to User Group",
        "operationId": "UserService_AssignUserToUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAssignUserToUserGroupRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/user_groups/{id}/users/all": {
      "get": {
        "summary": "3.19 Fetch All Users in a User Group",
        "operationId": "UserService_FetchAllUsersInUserGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identify ID of the user group",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/users": {
      "post": {
        "summary": "3.2 Create User",
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserCreateUserRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/users/users": {
      "get": {
        "summary": "3.5 Fetch All Users",
        "operationId": "UserService_FetchAllUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "params.expand",
            "description": "Whether to expand the access_policy field. If true, your app must",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "params.pageNum",
            "description": "include \"expand[]=access_policy\" in the request URL paramters\n\nCurrent page number in the pagination",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "params.pageSize",
            "description": "Number of users per page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/users/{id}": {
      "get": {
        "summary": "3.4 Fetch User",
        "operationId": "UserService_FetchUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "params.expand",
            "description": "Whether to expand the access_policy field. If true, your app must include\n \"expand[]=access_policy\" in the request URL paramters",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "put": {
        "summary": "3.3 Update User",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UserUserResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserUpdateUserRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/users/{id}/access_policies": {
      "get": {
        "summary": "3.20 Fetch the Access Policies Assigned to a User",
        "operationId": "UserService_FetchUserAccessPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AccessPolicyAccessPoliciesResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identify ID of the user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "params.onlyUserPolicies",
            "description": "False: all policies of the group the user belongs to are shown.\n True: only the policies assigned directly to the user are shown.",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "User"
        ]
      },
      "put": {
        "summary": "3.6 Assign Access Policy to User",
        "operationId": "UserService_AssignUserAccessPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAssignUserAccessPolicyRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/users/{id}/nfc_cards": {
      "put": {
        "summary": "3.7 Assign NFC Card from User",
        "operationId": "UserService_AssignUserNfcCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAssignUserNfcCardRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/users/{id}/nfc_cards/delete": {
      "delete": {
        "summary": "3.8 Unassign NFC Card from User",
        "operationId": "UserService_UnassignUserNfcCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "body.token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/users/{id}/pin_codes": {
      "put": {
        "summary": "3.9 Assign PIN Code to User",
        "operationId": "UserService_AssignUserPinCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserAssignUserPinCodeRequest"
            }
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/users/{id}/unassign-nfc-card": {
      "delete": {
        "summary": "3.10 Unassign PIN Code from user",
        "operationId": "UserService_UnassignUserPinCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "User"
        ]
      }
    },
    "/api/v1/developer/visitors": {
      "get": {
        "summary": "4.4 Fetch all visitors",
        "operationId": "VisitorService_FetchAllVisitors",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/VisitorVisitorsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "params.status",
            "description": " - UNKNOWN: Note: This is a placeholder, does not exist on API.\n - UPCOMING: Upcoming visit\n - VISITED: Completed visit\n - VISITING: Currently visiting\n - CANCELLED: Cancelled visit\n - NO_VISIT: No visit occurred\n - ACTIVE: Active visit",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "UPCOMING",
              "VISITED",
              "VISITING",
              "CANCELLED",
              "NO_VISIT",
              "ACTIVE"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "params.keyword",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "params.pageNum",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "params.pageSize",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "params.expand",
            "description": "Determine whether to return associated objects,",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Visitor"
        ]
      },
      "post": {
        "summary": "4.2 Create a new visitor",
        "operationId": "VisitorService_CreateVisitor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/VisitorVisitorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorCreateVisitorRequest"
            }
          }
        ],
        "tags": [
          "Visitor"
        ]
      }
    },
    "/api/v1/developer/visitors/{id}": {
      "get": {
        "summary": "4.3 Fetch visitor details by ID",
        "operationId": "VisitorService_FetchVisitor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/VisitorVisitorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identify ID of the visitor",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Visitor"
        ]
      },
      "delete": {
        "summary": "4.6 Delete a visitor by ID",
        "operationId": "VisitorService_DeleteVisitor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/VisitorVisitorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Visitor"
        ]
      },
      "put": {
        "summary": "4.5 Update a visitor by ID",
        "operationId": "VisitorService_UpdateVisitor",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/VisitorVisitorResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorUpdateVisitorRequest"
            }
          }
        ],
        "tags": [
          "Visitor"
        ]
      }
    },
    "/api/v1/developer/visitors/{id}/nfc_cards": {
      "put": {
        "summary": "4.7 Assign Visitor NFC Card",
        "operationId": "VisitorService_AssignVisitorNfcCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Visitor"
        ]
      }
    },
    "/api/v1/developer/visitors/{id}/nfc_cards/delete": {
      "put": {
        "summary": "4.8 Unassign Visitor NFC Card",
        "operationId": "VisitorService_UnassignVisitorNfcCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorUnassignVisitorNfcCardRequest"
            }
          }
        ],
        "tags": [
          "Visitor"
        ]
      }
    },
    "/api/v1/developer/visitors/{id}/pin_codes": {
      "delete": {
        "summary": "4.10 Unassisgn Visitor Pin Code",
        "operationId": "VisitorService_UnassignVisitorPinCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path.id",
            "description": "Identity ID of the visitor.\n Get it from the API, /api/v1/developer/visitors",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Visitor"
        ]
      },
      "put": {
        "summary": "4.9 Assign Visitor Pin Code",
        "operationId": "VisitorService_AssignVisitorPinCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/SharedStatusCodeResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VisitorAssignVisitorPinCodeRequest"
            }
          }
        ],
        "tags": [
          "Visitor"
        ]
      }
    }
  },
  "definitions": {
    "AccessPolicyAccessPoliciesResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyAccessPolicy"
          }
        }
      }
    },
    "AccessPolicyAccessPolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SharedResource"
          }
        },
        "scheduleId": {
          "type": "string"
        }
      }
    },
    "AccessPolicyAccessPolicyResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/AccessPolicyAccessPolicy"
        }
      }
    },
    "AccessPolicyCreateAccessPolicyRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the access policy."
        },
        "resource": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SharedResource"
          },
          "description": "Used to assign accessible locations to the access policy."
        },
        "scheduleId": {
          "type": "string",
          "description": "Identity ID of the schedule. Assign additional schedules."
        }
      }
    },
    "AccessPolicyCreateHolidayGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the holiday group."
        },
        "description": {
          "type": "string",
          "title": "Description of the holiday group"
        },
        "holidays": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyHoliday"
          },
          "description": "show a list of the holidays within the holiday group."
        }
      }
    },
    "AccessPolicyCreateScheduleRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "weekSchedule": {
          "$ref": "#/definitions/AccessPolicyWeekSchedule"
        },
        "holidayGroupId": {
          "type": "string"
        },
        "holidaySchedule": {
          "$ref": "#/definitions/AccessPolicyHolidaySchedule"
        }
      }
    },
    "AccessPolicyDaySchedule": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "title": "Start time of the access period"
        },
        "endTime": {
          "type": "string",
          "title": "End time of the access period"
        }
      }
    },
    "AccessPolicyHoliday": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "Description of the holiday."
        },
        "id": {
          "type": "string",
          "description": "Identity ID of the holiday."
        },
        "name": {
          "type": "string",
          "description": "Name of the holiday."
        },
        "repeat": {
          "type": "boolean",
          "description": "Indicate whether the holiday repeats annually."
        },
        "startTime": {
          "type": "string",
          "title": "Start time of the holiday, provided in UTC format"
        },
        "endTime": {
          "type": "string",
          "description": "according to RFC3339.\n\nEnd time of the holiday, provided in UTC format"
        }
      }
    },
    "AccessPolicyHolidayGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identity ID of the holiday group"
        },
        "name": {
          "type": "string",
          "description": "Name of the holiday group."
        },
        "isDefault": {
          "type": "boolean",
          "description": "Indicate whether the holiday group is the system default."
        },
        "description": {
          "type": "string",
          "description": "Description of the holiday group."
        },
        "holidays": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyHoliday"
          },
          "description": "Show a list of the holidays within the holiday group."
        }
      }
    },
    "AccessPolicyHolidayGroupResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/AccessPolicyHolidayGroup"
        }
      }
    },
    "AccessPolicyHolidayGroupSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identity ID of the holiday group"
        },
        "name": {
          "type": "string",
          "description": "Name of the holiday group."
        },
        "description": {
          "type": "string",
          "description": "Description of the holiday group."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Total number of holidays."
        }
      }
    },
    "AccessPolicyHolidayGroupSummaryResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyHolidayGroupSummary"
          }
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "AccessPolicyHolidaySchedule": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "int64"
        },
        "endTime": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "AccessPolicySchedule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Schedule ID"
        },
        "name": {
          "type": "string",
          "title": "Name of the schedule"
        },
        "isDefault": {
          "type": "boolean",
          "title": "Whether system default"
        },
        "type": {
          "type": "string",
          "title": "Type of the schedule (e.g., access)"
        },
        "weekly": {
          "$ref": "#/definitions/AccessPolicyWeekSchedule",
          "description": "Customizable daily scheduling, or every day if empty."
        },
        "holidaySchedule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyHolidaySchedule"
          },
          "description": "Specify the accessible period during holidays."
        },
        "holidayGroupId": {
          "type": "string",
          "title": "Identity ID of the holiday group"
        }
      }
    },
    "AccessPolicyScheduleResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/AccessPolicySchedule"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "AccessPolicySchedulesResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicySchedule"
          }
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "AccessPolicyUpdateAccessPolicyRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the access policy. Omit if it doesn't need to be updated."
        },
        "resource": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SharedResource"
          },
          "title": "Used to assign accessible locations to the access policy. Omit if it"
        },
        "scheduleId": {
          "type": "string",
          "description": "doesn't need to be updated.\n\nIdentify ID of the schedule. Assign additional schedules. Omit this"
        }
      }
    },
    "AccessPolicyUpdateHolidayGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the holiday group."
        },
        "description": {
          "type": "string",
          "title": "Description of the holiday group"
        },
        "holidays": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyHoliday"
          },
          "description": "show a list of the holidays within the holiday group."
        }
      }
    },
    "AccessPolicyUpdateScheduleRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "weekSchedule": {
          "$ref": "#/definitions/AccessPolicyWeekSchedule"
        },
        "holidayGroupId": {
          "type": "string"
        },
        "holidaySchedule": {
          "$ref": "#/definitions/AccessPolicyHolidaySchedule"
        }
      }
    },
    "AccessPolicyWeekSchedule": {
      "type": "object",
      "properties": {
        "sunday": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyDaySchedule"
          },
          "title": "Schedule for Sunday"
        },
        "monday": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyDaySchedule"
          },
          "title": "Schedule for Monday"
        },
        "tuesday": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyDaySchedule"
          },
          "title": "Schedule for Tuesday"
        },
        "wednesday": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyDaySchedule"
          },
          "title": "Schedule for Wednesday"
        },
        "thursday": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyDaySchedule"
          },
          "title": "Schedule for Thursday"
        },
        "friday": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyDaySchedule"
          },
          "title": "Schedule for Friday"
        },
        "saturday": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyDaySchedule"
          },
          "title": "Schedule for Saturday"
        }
      }
    },
    "SharedResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID of the door group"
        },
        "name": {
          "type": "string",
          "title": "Name of the door group"
        },
        "type": {
          "type": "string",
          "title": "Type of the door group"
        }
      }
    },
    "CredentialEnrollNfcCardRequest": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "string",
          "title": "Identity ID of the device. Get it from the API,"
        },
        "resetUaCard": {
          "type": "boolean",
          "description": "Option to reset an NFC card already enrolled at another site.",
          "title": "/api/v1/developer/devices"
        }
      }
    },
    "CredentialNfcCard": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "displayId": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "title": "\"assigned\", \"pending\", \"disabled\", \"deleted\", \"lost\""
        },
        "alias": {
          "type": "string"
        },
        "cardType": {
          "type": "string",
          "title": "e.g., \"ua_card\""
        },
        "userType": {
          "type": "string",
          "title": "\"USER\" or \"VISITOR\""
        },
        "user": {
          "$ref": "#/definitions/CredentialUser"
        }
      }
    },
    "CredentialNfcCardResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/CredentialNfcCard"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "CredentialNfcCardSession": {
      "type": "object",
      "properties": {
        "sessionId": {
          "type": "string"
        }
      }
    },
    "CredentialNfcCardSessionResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/CredentialNfcCardSession"
        }
      }
    },
    "CredentialNfcCardToken": {
      "type": "object",
      "properties": {
        "cardId": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "CredentialNfcCardTokenResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/CredentialNfcCardToken"
        }
      }
    },
    "CredentialNfcCardsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/CredentialNfcCard"
          }
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "CredentialPINCode": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        }
      }
    },
    "CredentialPINCodeResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/CredentialPINCode"
        }
      }
    },
    "CredentialUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "DeviceDevice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        }
      }
    },
    "DeviceDevicesResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/DeviceDevice"
          }
        }
      }
    },
    "SpaceCreateDoorGroupRequest": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string",
          "title": "Name of the door group. This needs to be globally unique"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SpaceResource"
          },
          "title": "Collection of door ID"
        }
      }
    },
    "SpaceDoor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identity ID of the door group"
        },
        "name": {
          "type": "string",
          "title": "Name of the door"
        },
        "fullName": {
          "type": "string",
          "title": "Full name of the door"
        },
        "floorId": {
          "type": "string",
          "title": "Identity ID of the floor"
        },
        "type": {
          "type": "string",
          "title": "Type of the door"
        },
        "isBindHub": {
          "type": "string",
          "title": "Indicate whether the door has bound to a hub device. It can only be"
        },
        "doorLockRelayStatus": {
          "type": "string",
          "description": "used for remote opening if it's bound.\n\nDoor lock status. enum door_lock_relay_status {lock,unlock}"
        },
        "doorPositionStatus": {
          "type": "string",
          "title": "DPS: Door position status, including both open and close . A null"
        }
      }
    },
    "SpaceDoorEmergencyStatus": {
      "type": "object",
      "properties": {
        "evacuation": {
          "type": "boolean"
        },
        "lockdown": {
          "type": "boolean"
        }
      }
    },
    "SpaceDoorEmergencyStatusResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/SpaceDoorEmergencyStatus"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "SpaceDoorLockingRule": {
      "type": "object",
      "properties": {
        "endedTime": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "SpaceDoorLockingRuleResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/SpaceDoorLockingRule"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "SpaceDoorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/SpaceDoor"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "SpaceDoorStatusResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "SpaceDoorsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SpaceDoor"
          }
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "SpaceResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identity ID of the door"
        },
        "name": {
          "type": "string",
          "title": "Name of the door"
        },
        "type": {
          "type": "string",
          "title": "Type of the door"
        },
        "isBindHub": {
          "type": "boolean",
          "description": "Indicate whether the door has bound to a hub device."
        }
      }
    },
    "SpaceResourceResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/SpaceResourceTopology"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "SpaceResourceTopology": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Identity ID of the floor"
        },
        "type": {
          "type": "string",
          "title": "Type of the floor"
        },
        "name": {
          "type": "string",
          "title": "Name of the floor"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SpaceResource"
          },
          "description": "Contain all the doors on the floor."
        }
      }
    },
    "SpaceResourcesResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SpaceResourceTopology"
          }
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "SpaceSetDoorEmergencyStatusRequest": {
      "type": "object",
      "properties": {
        "lockdown": {
          "type": "boolean",
          "title": "True will keep the door locked"
        },
        "evacuation": {
          "type": "boolean",
          "description": "True will keep the door unlocked."
        }
      }
    },
    "SpaceSetTemporaryDoorLockingRuleRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "enum type {keep_lock,keep_unlock,custom,reset,lock_early} keep_lock is used\nto set the door to the \"keep locked\" state, while keep_unlock is used to\nset it to the \"keep unlocked\" state. custom allows customization of the\nunlock time duration, and reset is used to restore the door to its initial\nstate (not applicable to the \"lock_early\" state). NOTE: If the door is\ncurrently on an unlock schedule ( schedule ), you can use lock_early to\nlock the door early."
        },
        "interval": {
          "type": "integer",
          "format": "int32",
          "title": "Set the lock time duration (minutes) when type is custom, ex: 10"
        }
      }
    },
    "SpaceUpdateDoorGroupRequest": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SpaceResource"
          }
        }
      }
    },
    "SystemLogActor": {
      "type": "object",
      "properties": {
        "alternativeId": {
          "type": "string"
        },
        "alternativeName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "SystemLogAuthentication": {
      "type": "object",
      "properties": {
        "credentialProvider": {
          "type": "string"
        },
        "issuer": {
          "type": "string"
        }
      }
    },
    "SystemLogEvent": {
      "type": "object",
      "properties": {
        "displayMessage": {
          "type": "string"
        },
        "published": {
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "type": "string"
        },
        "result": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "SystemLogExportSystemLogsRequest": {
      "type": "object",
      "properties": {
        "topic": {
          "type": "string"
        },
        "since": {
          "type": "integer",
          "format": "int32",
          "title": "Fetch different system logs by topic. enum topic\n{critical,door_openings,updates,device_events,admin_activity,visitor}"
        },
        "until": {
          "type": "integer",
          "format": "int32",
          "title": "Start time for log fetching, ex: 1689304925"
        },
        "timezone": {
          "type": "string",
          "title": "End time for log fetching, ex: 1689804925"
        },
        "actorId": {
          "type": "string",
          "description": "Identity ID of the actor (user, visitor, and device), ex:\n 3e1f196e-c97b-4748-aecb-eab5e9c251b2",
          "title": "Timezone for formatting time, ex: America/New_York"
        }
      }
    },
    "SystemLogExportSystemLogsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "file": {
          "type": "string",
          "format": "byte",
          "title": "Exported csv file"
        }
      }
    },
    "SystemLogFetchResourcesInSystemLogsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/SystemLogResourcesInSystemLog"
        }
      }
    },
    "SystemLogFetchStaticResourcesInSystemLogsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "type": "string",
          "title": "I assume this is an object, but not documented in API"
        }
      }
    },
    "SystemLogFetchSystemLogsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/SystemLogSystemLogs"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "SystemLogResourcesInSystemLog": {
      "type": "object",
      "properties": {
        "videoRecord": {
          "type": "string"
        },
        "videoRecordThumbnail": {
          "type": "string"
        },
        "createdAt": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string"
        }
      }
    },
    "SystemLogSystemLog": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string"
        },
        "Id": {
          "type": "string"
        },
        "Source": {
          "$ref": "#/definitions/SystemLogSystemLogSource"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "SystemLogSystemLogSource": {
      "type": "object",
      "properties": {
        "actor": {
          "$ref": "#/definitions/SystemLogActor"
        },
        "event": {
          "$ref": "#/definitions/SystemLogEvent"
        },
        "authentication": {
          "$ref": "#/definitions/SystemLogAuthentication"
        },
        "target": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SystemLogTarget"
          }
        }
      }
    },
    "SystemLogSystemLogs": {
      "type": "object",
      "properties": {
        "hits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SystemLogSystemLog"
          }
        }
      }
    },
    "SystemLogTarget": {
      "type": "object",
      "properties": {
        "alternativeId": {
          "type": "string"
        },
        "alternativeName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "UniFiIdentityAssignUserGroupResourcesRequest": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "string"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UniFiIdentityResourceId"
          }
        }
      }
    },
    "UniFiIdentityAssignUserResourcesRequest": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "string",
          "title": "enum resource_type {ev_station,vpn,wifi}"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UniFiIdentityResourceId"
          },
          "description": "Identity ID of the resources."
        }
      }
    },
    "UniFiIdentityData": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/UniFiIdentityResourceList"
          }
        }
      }
    },
    "UniFiIdentityInvitation": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "UniFiIdentityInvitationStatus": {
      "type": "object",
      "properties": {
        "errorCode": {
          "type": "string"
        },
        "errorMsg": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "UniFiIdentityInvitationStatusResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UniFiIdentityInvitationStatus"
          }
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "UniFiIdentityResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "shortName": {
          "type": "string"
        },
        "deleted": {
          "type": "boolean"
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "UniFiIdentityResourceId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "UniFiIdentityResourceList": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UniFiIdentityResource"
          }
        }
      }
    },
    "UniFiIdentityResourcesResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/UniFiIdentityData"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "UniFiIdentitySendUnifiIdentityInvitationsRequest": {
      "type": "object",
      "properties": {
        "invitations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UniFiIdentityInvitation"
          }
        }
      }
    },
    "SharedNFC_Card": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "SharedPIN_Code": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "SharedStatusCodeResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "UserAssignUserAccessPolicyRequest": {
      "type": "object",
      "properties": {
        "accessPolicyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserAssignUserGroupAccessPolicyRequest": {
      "type": "object",
      "properties": {
        "accessPolicyIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Identity ID of the access policy. Get it from the API,\n /api/v1/developer/access_policies"
        }
      }
    },
    "UserAssignUserNfcCardRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "title": "token of the nfc card"
        },
        "forceAdd": {
          "type": "boolean",
          "title": "determine whether to overwrite an NFC card that has"
        }
      }
    },
    "UserAssignUserPinCodeRequest": {
      "type": "object",
      "properties": {
        "pinCode": {
          "type": "string"
        }
      }
    },
    "UserAssignUserToUserGroupRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Get it from the API, /api/v1/developer/users\n The api documentation reads as a method for one user ID, but the repeated\n string implies that it may support multiple user IDs at once."
        }
      }
    },
    "UserCreateUserGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of the group"
        },
        "upId": {
          "type": "string",
          "title": "parent group ID, get from /api/v1/developer/user_groups"
        }
      }
    },
    "UserCreateUserRequest": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "employeeNumber": {
          "type": "string"
        },
        "onboardTime": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "UserStatus": {
      "type": "string",
      "enum": [
        "ACTIVE",
        "PENDING",
        "DEACTIVATED"
      ],
      "default": "ACTIVE"
    },
    "UserUnassignUserFromUserGroupRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Get it from the API, /api/v1/developer/users\n The api documentation reads as a method for one user ID, but the repeated\n string implies that it may support multiple user IDs at once."
        }
      }
    },
    "UserUpdateUserGroupRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name of the group"
        },
        "upId": {
          "type": "string",
          "title": "parent group ID, get from /api/v1/developer/user_groups"
        }
      }
    },
    "UserUpdateUserRequest": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "employeeNumber": {
          "type": "string"
        },
        "onboardTime": {
          "type": "string",
          "format": "int64"
        },
        "status": {
          "$ref": "#/definitions/UserStatus"
        }
      }
    },
    "UserUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "fullName": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "emailStatus": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "employeeNumber": {
          "type": "string"
        },
        "onboardTime": {
          "type": "string",
          "format": "int64"
        },
        "nfcCards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SharedNFC_Card"
          }
        },
        "pinCode": {
          "$ref": "#/definitions/SharedPIN_Code"
        },
        "accessPolicyIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accessPolicies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/AccessPolicyAccessPolicy"
          }
        },
        "status": {
          "$ref": "#/definitions/UserStatus"
        }
      }
    },
    "UserUserGroup": {
      "type": "object",
      "properties": {
        "fullName": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "upId": {
          "type": "string"
        },
        "upIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "UserUserGroupResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/UserUserGroup"
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "UserUserGroupsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UserUserGroup"
          }
        },
        "msg": {
          "type": "string"
        }
      }
    },
    "UserUserResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/UserUser"
        }
      }
    },
    "UserUsersResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/UserUser"
          }
        }
      }
    },
    "VisitorAssignVisitorPinCodeRequest": {
      "type": "object",
      "properties": {
        "pinCode": {
          "type": "string",
          "title": "Generate a PIN code for the visitor to unlock doors.\n Get it from the API, /api/v1/developer/pin_codes"
        }
      }
    },
    "VisitorCreateVisitorRequest": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "title": "First name of the visitors"
        },
        "lastName": {
          "type": "string",
          "title": "Last name of the visitor"
        },
        "remarks": {
          "type": "string",
          "title": "Remarks about the visitor"
        },
        "mobilePhone": {
          "type": "string",
          "title": "Mobile phone number of the visitor"
        },
        "email": {
          "type": "string",
          "title": "Email address of the visitor"
        },
        "VisitorCompany": {
          "type": "string",
          "title": "Company name of the visitor"
        },
        "startTime": {
          "type": "string",
          "format": "int64",
          "title": "Start time of the visit, ex: 1688546460"
        },
        "endTime": {
          "type": "string",
          "format": "int64",
          "title": "End time of the visit, ex: 1688572799"
        },
        "visitReason": {
          "type": "string",
          "description": "Visit reason, see VisitReason enum."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SharedResource"
          }
        },
        "weekSchedule": {
          "$ref": "#/definitions/AccessPolicyWeekSchedule",
          "description": "Assign available locations to the visitor.\n\nThe customizable scheduling strategy for each day from Sunday to Saturday.\n If not specified, it means access is allowed every day"
        }
      }
    },
    "VisitorStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "UPCOMING",
        "VISITED",
        "VISITING",
        "CANCELLED",
        "NO_VISIT",
        "ACTIVE"
      ],
      "default": "UNKNOWN"
    },
    "VisitorUnassignVisitorNfcCardRequest": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "description": "Token of the NFC Card."
        }
      }
    },
    "VisitorUpdateVisitorRequest": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name of the visitor."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the visitor."
        },
        "remarks": {
          "type": "string",
          "description": "Remarks about the visitor."
        },
        "mobilePhone": {
          "type": "string",
          "description": "Mobile phone number of the visitor."
        },
        "email": {
          "type": "string",
          "description": "Email address of the visitor."
        },
        "visitorCompany": {
          "type": "string",
          "description": "Company name of the visitor."
        },
        "startTime": {
          "type": "integer",
          "format": "int32",
          "description": "Start time of the visit."
        },
        "endTime": {
          "type": "integer",
          "format": "int32",
          "title": "End time of the visit,"
        },
        "visitReason": {
          "type": "string",
          "description": "Visit reason, see VisitReason enum."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SharedResource"
          }
        },
        "weekSchedule": {
          "$ref": "#/definitions/AccessPolicyWeekSchedule"
        }
      }
    },
    "VisitorVisitor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique ID of the visitor"
        },
        "firstName": {
          "type": "string",
          "title": "First name of the visitor"
        },
        "lastName": {
          "type": "string",
          "title": "Last name of the visitor"
        },
        "status": {
          "$ref": "#/definitions/VisitorStatus",
          "title": "Status of the visit"
        },
        "inviterId": {
          "type": "string",
          "title": "ID of the inviter"
        },
        "inviterName": {
          "type": "string",
          "title": "Name of the inviter"
        },
        "mobilePhone": {
          "type": "string",
          "title": "Contact phone number of the visitor"
        },
        "remarks": {
          "type": "string",
          "title": "Remarks about the visitor"
        },
        "email": {
          "type": "string",
          "title": "Email address of the visitor"
        },
        "visitorCompany": {
          "type": "string",
          "title": "Company of the visitor"
        },
        "visitReason": {
          "type": "string",
          "title": "Visit reason (e.g., Interview, Business)"
        },
        "startTime": {
          "type": "string",
          "format": "int64",
          "title": "Start time of the visit"
        },
        "endTime": {
          "type": "string",
          "format": "int64",
          "title": "End time of the visit"
        },
        "nfcCards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SharedNFC_Card"
          },
          "title": "NFC cards associated with the visitor"
        },
        "pinCode": {
          "$ref": "#/definitions/SharedPIN_Code",
          "title": "PIN code associated with the visitor"
        },
        "scheduleId": {
          "type": "string",
          "title": "Schedule ID associated with the visit"
        },
        "schedule": {
          "$ref": "#/definitions/AccessPolicySchedule",
          "description": "Schedule details. One-time visit if missing."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/SharedResource"
          },
          "title": "Locations that the visitor can access"
        }
      }
    },
    "VisitorVisitorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/VisitorVisitor"
        }
      }
    },
    "VisitorVisitorsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "msg": {
          "type": "string"
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/VisitorVisitor"
          }
        }
      }
    }
  }
}
