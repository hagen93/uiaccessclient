# coding: utf-8

"""
    UniFi Access API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uiaccessclient.models.access_policy_schedule import AccessPolicySchedule
from uiaccessclient.models.shared_nfc_card import SharedNFCCard
from uiaccessclient.models.shared_pin_code import SharedPINCode
from uiaccessclient.models.shared_resource import SharedResource
from uiaccessclient.models.visitor_status import VisitorStatus
from typing import Optional, Set
from typing_extensions import Self

class VisitorVisitor(BaseModel):
    """
    VisitorVisitor
    """ # noqa: E501
    id: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName")
    status: Optional[VisitorStatus] = VisitorStatus.UNKNOWN
    inviter_id: Optional[StrictStr] = Field(default=None, alias="inviterId")
    inviter_name: Optional[StrictStr] = Field(default=None, alias="inviterName")
    mobile_phone: Optional[StrictStr] = Field(default=None, alias="mobilePhone")
    remarks: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    visitor_company: Optional[StrictStr] = Field(default=None, alias="visitorCompany")
    visit_reason: Optional[StrictStr] = Field(default=None, alias="visitReason")
    start_time: Optional[StrictStr] = Field(default=None, alias="startTime")
    end_time: Optional[StrictStr] = Field(default=None, alias="endTime")
    nfc_cards: Optional[List[SharedNFCCard]] = Field(default=None, alias="nfcCards")
    pin_code: Optional[SharedPINCode] = Field(default=None, alias="pinCode")
    schedule_id: Optional[StrictStr] = Field(default=None, alias="scheduleId")
    schedule: Optional[AccessPolicySchedule] = None
    resources: Optional[List[SharedResource]] = None
    __properties: ClassVar[List[str]] = ["id", "firstName", "lastName", "status", "inviterId", "inviterName", "mobilePhone", "remarks", "email", "visitorCompany", "visitReason", "startTime", "endTime", "nfcCards", "pinCode", "scheduleId", "schedule", "resources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VisitorVisitor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in nfc_cards (list)
        _items = []
        if self.nfc_cards:
            for _item_nfc_cards in self.nfc_cards:
                if _item_nfc_cards:
                    _items.append(_item_nfc_cards.to_dict())
            _dict['nfcCards'] = _items
        # override the default output from pydantic by calling `to_dict()` of pin_code
        if self.pin_code:
            _dict['pinCode'] = self.pin_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VisitorVisitor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "status": obj.get("status") if obj.get("status") is not None else VisitorStatus.UNKNOWN,
            "inviterId": obj.get("inviterId"),
            "inviterName": obj.get("inviterName"),
            "mobilePhone": obj.get("mobilePhone"),
            "remarks": obj.get("remarks"),
            "email": obj.get("email"),
            "visitorCompany": obj.get("visitorCompany"),
            "visitReason": obj.get("visitReason"),
            "startTime": obj.get("startTime"),
            "endTime": obj.get("endTime"),
            "nfcCards": [SharedNFCCard.from_dict(_item) for _item in obj["nfcCards"]] if obj.get("nfcCards") is not None else None,
            "pinCode": SharedPINCode.from_dict(obj["pinCode"]) if obj.get("pinCode") is not None else None,
            "scheduleId": obj.get("scheduleId"),
            "schedule": AccessPolicySchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "resources": [SharedResource.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None
        })
        return _obj


